name: Development CI

on:
  push:
    branches:
      - main
    paths:
      - '**.conf'
      - 'nginx-deployment.yaml'
      - '**.lua'
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize

jobs:
  # linting:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: '1.20' # Adjust this to your Go version
  
  #     - name: Install linters
  #       run: |
  #         go install golang.org/x/lint/golint@latest # Install golint
  #         go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest # Optional: Install golangci-lint
  #         export PATH=$PATH:$(go env GOPATH)/bin
  
  #     - name: Run Golint
  #       run: golint ./...

  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: '1.20.0'
  #     - name: Install dependencies
  #       run: go mod tidy
  #     - name: Build
  #       run: go build -o main ./cmd/main.go
  #     - name: Test with the Go CLI
  #       run: go test ./...

  deploy:
      runs-on: ubuntu-latest

      # needs: [test]
      steps:
        # Step 1: Check out the code
        - name: Checkout code
          uses: actions/checkout@v3
        
        # Step 2: Set up OpenShift CLI
        - name: Install OpenShift CLI
          run: |
            curl -L https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz | tar -xz -C /usr/local/bin
            oc version
        
        # Step 3: Log in to OpenShift
        - name: Log in to OpenShift
          run: |
            oc login --token=${{ secrets.OPENSHIFT_TOKEN }} --server=${{ secrets.OPENSHIFT_SERVER }}
        
        # Step 4: Switch to the target namespace/project
        - name: Switch namespace
          run: |
            oc project oscar-dev

        # Step 5: Delete old configmap
        - name: Deleting previous config
          run: |
            oc delete configmap nginx-config

        # Step 6: Delete old deployment
        - name: Deleting previous deployment
          run: |
            oc delete deployment nginx

        # Step 7: Build configmap on Openshift
        - name: Build configmap
          run: |
            oc create configmap nginx-config \
            --from-file=nginx.conf \
            --from-file=conf.d/locations/chat.conf \
            --from-file=conf.d/locations/faq.conf \
            --from-file=conf.d/locations/login.conf \
            --from-file=conf.d/locations/map.conf \
            --from-file=conf.d/locations/test.conf \
            --from-file=conf.d/locations/user.conf \
            --from-file=conf.d/locations/schedule.conf \
            --from-file=conf.d/roles.lua \
            --from-file=conf.d/upstreams.conf \
            --from-file=validate_jwt.lua

        # Step 6: Deploy to OpenShift
        - name: Build deployment
          run: |
            oc apply -f nginx-deployment.yaml 
